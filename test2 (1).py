# -*- coding: utf-8 -*-
"""test2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gDCPZpqA3luMIA1VNRRebvGSmyTw3BpO
"""

import threading
from threading import Semaphore
import time
import cv2
from matplotlib import pyplot as plt

global pos
arr = [0]
# pos = 0
# create figure
fig = plt.figure(figsize=(100, 70))
# setting values to rows and column variables
rows = 40
columns = 1

def producerimage(x):
      Image1 = cv2.imread('r/producer.png')
      fig.add_subplot(rows, columns, x)
      # fig[rows,columns] = x
      '''if x>=1 and x<=5:
        fig.add_subplot(rows, columns, x)
      elif x>=6 and x<=10:
        fig.add_subplot(rows, columns, x+5)
      elif x>=11 and x<=15:
        fig.add_subplot(rows, columns, x+10)
      else:
        fig.add_subplot(rows, columns, x+15)'''
      plt.imshow(Image1)
      plt.axis('off')
      plt.title(x)
def consumerimage(y):
      Image2 = cv2.imread('r/consuming.jpeg')
      fig.add_subplot(rows, columns, y)
      '''if y>=1 and y<=5:
        fig.add_subplot(rows, columns, y+5)
      elif y>=6 and y<=10:
        fig.add_subplot(rows, columns, y+10)
      elif y>=11 and y<=15:
        fig.add_subplot(rows, columns, y+15)
      else:
        fig.add_subplot(rows, columns, y+20)'''
      plt.imshow(Image2)
      plt.axis('off')
      plt.title(y)



# Shared Memory variables
CAPACITY = 10
buffer = [-1 for i in range(CAPACITY)]
in_index = 0
out_index = 0
 
# Declaring Semaphores
mutex = Semaphore()
empty = Semaphore(CAPACITY)
full = Semaphore(0)
pos=Semaphore(0)
# Producer Thread Class
class Producer(threading.Thread):
  def run(self):
    # abcd += 1
    global CAPACITY, buffer, in_index, out_index
    global mutex, empty, full
     
    items_produced = 0
    counter = 0
     
    while items_produced < 20:
      empty.acquire()
      mutex.acquire()
       
      counter += 1
      arr.append(arr[-1] + 1)
      buffer[in_index] = counter
      in_index = (in_index + 1)%CAPACITY
      print("Producer produced : ", counter)
      Image1 = cv2.imread('/producer.jpeg')
      fig.add_subplot(rows, columns, arr[-1])
      '''if x>=1 and x<=5:
        fig.add_subplot(rows, columns, x)
      elif x>=6 and x<=10:
        fig.add_subplot(rows, columns, x+5)
      elif x>=11 and x<=15:
        fig.add_subplot(rows, columns, x+10)
      else:
        fig.add_subplot(rows, columns, x+15)'''
      plt.imshow(Image1)
      plt.axis('off')
      plt.title(counter)
      mutex.release()
      full.release()
       
      time.sleep(1)
       
      items_produced += 1
 
# Consumer Thread Class
class Consumer(threading.Thread):
  def run(self):
    # abcd += 1
    global CAPACITY, buffer, in_index, out_index, counter
    global mutex, empty, full
     
    items_consumed = 0
     
    while items_consumed < 20:
      full.acquire()
      mutex.acquire()
       
      item = buffer[out_index]
      # pos += 1
      arr.append(arr[-1] + 1)
      out_index = (out_index + 1)%CAPACITY
      print("Consumer consumed item : ", item)
      Image2 = cv2.imread('/consumer.jpeg')
      fig.add_subplot(rows, columns, arr[-1])
      '''if y>=1 and y<=5:
        fig.add_subplot(rows, columns, y+5)
      elif y>=6 and y<=10:
        fig.add_subplot(rows, columns, y+10)
      elif y>=11 and y<=15:
        fig.add_subplot(rows, columns, y+15)
      else:
        fig.add_subplot(rows, columns, y+20)'''
      plt.imshow(Image2)
      plt.axis('off')
      plt.title(item)

      #pos.release()
      #consumerimage(pos._value)
      mutex.release()
      empty.release()      
       
      time.sleep(2)
       
      items_consumed += 1
 
# Creating Threads
producer = Producer()
consumer = Consumer()
# pos = 0
# Starting Threads
consumer.start()
producer.start()
 
# Waiting for threads to complete
producer.join()
consumer.join()